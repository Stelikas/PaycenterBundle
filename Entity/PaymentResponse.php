<?php

namespace Thanpa\PaycenterBundle\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Thanpa\PaycenterBundle\Validator\Constraints\ValidHashKey;

/**
 * Class PaymentResponse
 * @package Thanpa\PaycenterBundle\Entity
 * @ValidHashKey()
 */
class PaymentResponse
{

    /**
     * @var int
     */
    private $id;

    /**
     * @var int
     *
     * Reference id of the submitted request. There is a different value per request (even if the transaction failed).
     *
     * @Assert\NotBlank()
     * @Assert\Type(type="integer")
     */
    private $supportReferenceId;

    /**
     * @var string (max. 5 characters)
     *
     * The request result code indicating whether there was any technical problem in the transaction processing.
     * Specifically:
     *      Value = 0: There was no problem; the transaction was executed. Then, the "StatusFlag" parameter must
     *      be checked to verify that the transaction was approved.
     *
     *      Value != 0: There was a transaction data problem or technical problem at the Paycenter, so the transaction
     *      failed and the card was not debited. The "ResultDescription" parameter contains the problem description.
     *
     * @Assert\NotBlank()
     * @Assert\Length(max="5")
     */
    private $resultCode;

    /**
     * @var string (max. 1024 characters)
     *
     * The description corresponding to the "ResultCode" parameter value.
     *
     * @Assert\Length(max="1024")
     */
    private $resultDescription;

    /**
     * @var string (max. 12 characters)
     *
     * The parameter value indicating whether the transaction was approved. Possible values:
     *      Success: Transaction approved by the Issuer.
     *      Failure: Transaction declined by the Issuer.
     *
     * @Assert\NotBlank()
     * @Assert\Length(max="12")
     */
    private $statusFlag;

    /**
     * @var string (2 characters)
     *
     * When a transaction has been executed, it contains a response code.
     * The response codes for approved transaction are:
     *      00, 08, 10, 11, 16.
     *
     * Attention! The return value 11 means that a successful transaction has already been performed
     * with the request "MerchantReference"; therefore the transaction has not been executed.
     *
     * @Assert\Length(max="2")
     */
    private $responseCode;

    /**
     * @var string (max. 120 characters)
     *
     * The description corresponding to th "ResponseCode" parameter value.
     *
     * @Assert\Length(max="120")
     */
    private $responseDescription;

    /**
     * @var string (5 characters)
     *
     * The language code sent with the request. Possible values:
     * - el-GR: Greek
     * - en-US: English
     * - ru-RU: Russian
     * - de-DE: German
     *
     * @Assert\NotBlank()
     * @Assert\Length(max="5")
     */
    private $languageCode;

    /**
     * @var string (max. 50 characters)
     *
     * The transaction reference sent with th request.
     *
     * @Assert\NotBlank()
     * @Assert\Length(max="50")
     */
    private $merchantReference;

    /**
     * @var string (19 characters)
     *
     * - If no transaction has been executed (i.e. when ResultCode != 0), the value is a dash "-".
     * - If a transaction has been executed (i.e. when ResultCode = 0), the value is the transaction execution
     *   date and time in the DD/MM/YYYY HH24:MM:SS format.
     *
     * @Assert\NotBlank()
     * @Assert\Length(max="19")
     */
    private $transactionDateTime;

    /**
     * @var int
     *
     * If a transaction has been executed, it takes a unique transaction id generated by ePOS Paycenter.
     *
     * @Assert\Type(type="integer")
     */
    private $transactionId;

    /**
     * @var int
     *
     * The type of the card used for the transaction. Possible values:
     * 1: Visa
     * 2: Mastercard
     * 3: Maestro
     * 4: American Express (supported only if included in the agreement with the merchant)
     * 5: Diners or Discover (supported only if included in the agreement with the merchant)
     *
     * @Assert\Type(type="integer")
     */
    private $cardType;

    /**
     * @var int
     *
     * If a transaction has been executed (i.e. when ResultCode=0), it takes the number of the package
     * that includes this transaction.
     *
     * @Assert\Type(type="integer")
     */
    private $packageNo;

    /**
     * @var string (max. 6 characters)
     *
     * If a successful transaction has been executed (i.e. when ResultCode=0 and StatusFlag=Success),
     * it takes the transaction approval code.
     *
     * @Assert\Length(max="6")
     */
    private $approvalCode;

    /**
     * @var string (max. 12 characters)
     *
     * If a transaction has been executed (i.e. when ResultCode=0), it takes the Retrieval Reference Number
     * generated by the acquiring system.
     *
     * @Assert\Length(max="12")
     */
    private $retrievalRef;

    /**
     * @var string (2 characters)
     *
     * It concerns the result of the cardholder authentication process (3D-Secure) which is applied to Visa,
     * Mastercard and Maestro transactions. Possible values:
     *  - 01: A card was used that is enrolled in cardholder authentication services
     *        (Verified by Visa / Mastercard SecureCode) and the holder entered the correct pin.
     *  - 02: A card was used that is not enrolled in cardholder authentication services
     *        (Verified by Visa / Mastercard SecureCode) but the authentication process was successfully completed.
     *  - 03: An anonymous prepaid card or business card was used (not supported by cardholder authentication services)
     *        or the authentication process failed.
     *
     * @Assert\NotBlank()
     * @Assert\Length(max="2")
     */
    private $authStatus;

    /**
     * @var string (max. 512 characters)
     *
     * The content of "parameters" variable that had been sent with the request is returned to the success/failure pages
     *
     * @Assert\Length(max="512")
     */
    private $parameters;

    /**
     * @var string (64 characters)
     *
     * If the transaction is successful (i.e. when ResultCode=0 and StatusFlag=Success), it takes a value that will
     * be used by the merchant system to authenticate the response. If the transaction failed, it is blank.
     *
     * @Assert\Length(max="64")
     */
    private $hashKey;

    /**
     * Get support reference Id
     *
     * @return int
     */
    public function getSupportReferenceId()
    {
        return $this->supportReferenceId;
    }

    /**
     * Set Support Reference Id
     *
     * @param int $supportReferenceId Support Reference Id
     * @return PaymentResponse
     */
    public function setSupportReferenceId($supportReferenceId)
    {
        $this->supportReferenceId = $supportReferenceId;

        return $this;
    }

    /**
     * Get result code
     *
     * @return string
     */
    public function getResultCode()
    {
        return $this->resultCode;
    }

    /**
     * Set Result Code
     *
     * @param string $resultCode Result code
     * @return PaymentResponse
     */
    public function setResultCode($resultCode)
    {
        $this->resultCode = $resultCode;

        return $this;
    }

    /**
     * Get result description
     *
     * @return string
     */
    public function getResultDescription()
    {
        return $this->resultDescription;
    }

    /**
     * Set result description
     *
     * @param string $resultDescription Result description
     * @return PaymentResponse
     */
    public function setResultDescription($resultDescription)
    {
        $this->resultDescription = $resultDescription;

        return $this;
    }

    /**
     * Get status flag
     *
     * @return string
     */
    public function getStatusFlag()
    {
        return $this->statusFlag;
    }

    /**
     * Set status flag
     *
     * @param string $statusFlag Status flag
     * @return PaymentResponse
     */
    public function setStatusFlag($statusFlag)
    {
        $this->statusFlag = $statusFlag;

        return $this;
    }

    /**
     * Get response code
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->responseCode;
    }

    /**
     * Set response code
     *
     * @param string $responseCode Response code
     * @return PaymentResponse
     */
    public function setResponseCode($responseCode)
    {
        $this->responseCode = $responseCode;

        return $this;
    }

    /**
     * Get response description
     *
     * @return string
     */
    public function getResponseDescription()
    {
        return $this->responseDescription;
    }

    /**
     * Set response description
     *
     * @param string $responseDescription Response Description
     * @return PaymentResponse
     */
    public function setResponseDescription($responseDescription)
    {
        $this->responseDescription = $responseDescription;

        return $this;
    }

    /**
     * Get language code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->languageCode;
    }

    /**
     * Set language code
     *
     * @param string $languageCode Language code
     * @return PaymentResponse
     */
    public function setLanguageCode($languageCode)
    {
        $this->languageCode = $languageCode;

        return $this;
    }

    /**
     * Get Merchant Reference
     *
     * @return string
     */
    public function getMerchantReference()
    {
        return $this->merchantReference;
    }

    /**
     * Set Merchant Reference
     *
     * @param string $merchantReference Merchant reference
     * @return PaymentResponse
     */
    public function setMerchantReference($merchantReference)
    {
        $this->merchantReference = $merchantReference;

        return $this;
    }

    /**
     * Get transaction date time
     *
     * @return string
     */
    public function getTransactionDateTime()
    {
        return $this->transactionDateTime;
    }

    /**
     * Set transaction date time
     *
     * @param string $transactionDateTime Transaction Date Time
     * @return PaymentResponse
     */
    public function setTransactionDateTime($transactionDateTime)
    {
        $this->transactionDateTime = $transactionDateTime;

        return $this;
    }

    /**
     * Get transaction id
     *
     * @return int
     */
    public function getTransactionId()
    {
        return $this->transactionId;
    }

    /**
     * Set Transaction Id
     *
     * @param int $transactionId Transaction Id
     * @return PaymentResponse
     */
    public function setTransactionId($transactionId)
    {
        $this->transactionId = $transactionId;

        return $this;
    }

    /**
     * Get Card Type
     *
     * @return int
     */
    public function getCardType()
    {
        return $this->cardType;
    }

    /**
     * Set Card Type
     *
     * @param int $cardType Card Type
     * @return PaymentResponse
     */
    public function setCardType($cardType)
    {
        $this->cardType = $cardType;

        return $this;
    }

    /**
     * Get PackageNo
     *
     * @return int
     */
    public function getPackageNo()
    {
        return $this->packageNo;
    }

    /**
     * Set PackageNo
     *
     * @param int $packageNo PackageNo
     * @return PaymentResponse
     */
    public function setPackageNo($packageNo)
    {
        $this->packageNo = $packageNo;

        return $this;
    }

    /**
     * Get approval code
     *
     * @return string
     */
    public function getApprovalCode()
    {
        return $this->approvalCode;
    }

    /**
     * Set Approval Code
     *
     * @param string $approvalCode Approval Code
     * @return PaymentResponse
     */
    public function setApprovalCode($approvalCode)
    {
        $this->approvalCode = $approvalCode;

        return $this;
    }

    /**
     * Get RetrievalRef
     *
     * @return string
     */
    public function getRetrievalRef()
    {
        return $this->retrievalRef;
    }

    /**
     * Set RetrievalRef
     *
     * @param string $retrievalRef RetrievalRef
     * @return PaymentResponse
     */
    public function setRetrievalRef($retrievalRef)
    {
        $this->retrievalRef = $retrievalRef;

        return $this;
    }

    /**
     * Get Auth Status
     *
     * @return string
     */
    public function getAuthStatus()
    {
        return $this->authStatus;
    }

    /**
     * Set auth status
     *
     * @param string $authStatus Auth Status
     * @return PaymentResponse
     */
    public function setAuthStatus($authStatus)
    {
        $this->authStatus = $authStatus;

        return $this;
    }

    /**
     * Get parameters
     *
     * @return string
     */
    public function getParameters()
    {
        return $this->parameters;
    }

    /**
     * Set parameters
     *
     * @param string $parameters Parameters
     * @return PaymentResponse
     */
    public function setParameters($parameters)
    {
        $this->parameters = $parameters;

        return $this;
    }

    /**
     * Get hash key
     *
     * @return string
     */
    public function getHashKey()
    {
        return $this->hashKey;
    }

    /**
     * Set hash key
     *
     * @param string $hashKey Hash Key
     * @return PaymentResponse
     */
    public function setHashKey($hashKey)
    {
        $this->hashKey = $hashKey;

        return $this;
    }
}
